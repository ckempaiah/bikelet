// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.BikeDataOnDemand;
import com.sjsu.bikelet.domain.BikeLocation;
import com.sjsu.bikelet.domain.BikeLocationDataOnDemand;
import com.sjsu.bikelet.domain.StationDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BikeLocationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BikeLocationDataOnDemand: @Component;
    
    private Random BikeLocationDataOnDemand.rnd = new SecureRandom();
    
    private List<BikeLocation> BikeLocationDataOnDemand.data;
    
    @Autowired
    BikeDataOnDemand BikeLocationDataOnDemand.bikeDataOnDemand;
    
    @Autowired
    StationDataOnDemand BikeLocationDataOnDemand.stationDataOnDemand;
    
    public BikeLocation BikeLocationDataOnDemand.getNewTransientBikeLocation(int index) {
        BikeLocation obj = new BikeLocation();
        setBikeStatus(obj, index);
        return obj;
    }
    
    public void BikeLocationDataOnDemand.setBikeStatus(BikeLocation obj, int index) {
        String bikeStatus = "bikeStat_" + index;
        if (bikeStatus.length() > 10) {
            bikeStatus = bikeStatus.substring(0, 10);
        }
        obj.setBikeStatus(bikeStatus);
    }
    
    public BikeLocation BikeLocationDataOnDemand.getSpecificBikeLocation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BikeLocation obj = data.get(index);
        Long id = obj.getId();
        return BikeLocation.findBikeLocation(id);
    }
    
    public BikeLocation BikeLocationDataOnDemand.getRandomBikeLocation() {
        init();
        BikeLocation obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return BikeLocation.findBikeLocation(id);
    }
    
    public boolean BikeLocationDataOnDemand.modifyBikeLocation(BikeLocation obj) {
        return false;
    }
    
    public void BikeLocationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = BikeLocation.findBikeLocationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BikeLocation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BikeLocation>();
        for (int i = 0; i < 10; i++) {
            BikeLocation obj = getNewTransientBikeLocation(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
