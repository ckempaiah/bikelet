// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.Program;
import com.sjsu.bikelet.domain.Station;
import com.sjsu.bikelet.domain.StationDataOnDemand;
import com.sjsu.bikelet.domain.SubscriptionPolicy;
import com.sjsu.bikelet.domain.SubscriptionPolicyDataOnDemand;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProgramDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProgramDataOnDemand: @Component;
    
    private Random ProgramDataOnDemand.rnd = new SecureRandom();
    
    private List<Program> ProgramDataOnDemand.data;
    
    @Autowired
    private StationDataOnDemand ProgramDataOnDemand.stationDataOnDemand;
    
    @Autowired
    private SubscriptionPolicyDataOnDemand ProgramDataOnDemand.subscriptionPolicyDataOnDemand;
    
    public Program ProgramDataOnDemand.getNewTransientProgram(int index) {
        Program obj = new Program();
        setDescription(obj, index);
        setEntityId(obj, index);
        setProgramName(obj, index);
        setStations(obj, index);
        setSubscpPolicy(obj, index);
        return obj;
    }
    
    public void ProgramDataOnDemand.setDescription(Program obj, int index) {
        String description = "description_" + index;
        if (description.length() > 255) {
            description = description.substring(0, 255);
        }
        obj.setDescription(description);
    }
    
    public void ProgramDataOnDemand.setEntityId(Program obj, int index) {
        Integer entityId = new Integer(index);
        obj.setEntityId(entityId);
    }
    
    public void ProgramDataOnDemand.setProgramName(Program obj, int index) {
        String programName = "programName_" + index;
        if (programName.length() > 60) {
            programName = programName.substring(0, 60);
        }
        obj.setProgramName(programName);
    }
    
    public void ProgramDataOnDemand.setStations(Program obj, int index) {
        Station stations = stationDataOnDemand.getRandomStation();
        obj.setStations(stations);
    }
    
    public void ProgramDataOnDemand.setSubscpPolicy(Program obj, int index) {
        SubscriptionPolicy subscpPolicy = subscriptionPolicyDataOnDemand.getRandomSubscriptionPolicy();
        obj.setSubscpPolicy(subscpPolicy);
    }
    
    public Program ProgramDataOnDemand.getSpecificProgram(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Program obj = data.get(index);
        java.lang.Long id = obj.getId();
        return Program.findProgram(id);
    }
    
    public Program ProgramDataOnDemand.getRandomProgram() {
        init();
        Program obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return Program.findProgram(id);
    }
    
    public boolean ProgramDataOnDemand.modifyProgram(Program obj) {
        return false;
    }
    
    public void ProgramDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Program.findProgramEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Program' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sjsu.bikelet.domain.Program>();
        for (int i = 0; i < 10; i++) {
            Program obj = getNewTransientProgram(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
