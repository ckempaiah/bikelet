// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.LicensePolicy;
import com.sjsu.bikelet.domain.TenantLicensePolicy;
import com.sjsu.bikelet.domain.TenantLicensePolicyDataOnDemand;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LicensePolicyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LicensePolicyDataOnDemand: @Component;
    
    private Random LicensePolicyDataOnDemand.rnd = new SecureRandom();
    
    private List<LicensePolicy> LicensePolicyDataOnDemand.data;
    
    @Autowired
    private TenantLicensePolicyDataOnDemand LicensePolicyDataOnDemand.tenantLicensePolicyDataOnDemand;
    
    public LicensePolicy LicensePolicyDataOnDemand.getNewTransientLicensePolicy(int index) {
        LicensePolicy obj = new LicensePolicy();
        setFreeTrialPeriodInDays(obj, index);
        setLicenseBaseCost(obj, index);
        setLicenseCostPerUser(obj, index);
        setLicenseId(obj, index);
        setLicenseName(obj, index);
        setLicenseType(obj, index);
        setTenLicPolicy(obj, index);
        return obj;
    }
    
    public void LicensePolicyDataOnDemand.setFreeTrialPeriodInDays(LicensePolicy obj, int index) {
        Integer freeTrialPeriodInDays = new Integer(index);
        obj.setFreeTrialPeriodInDays(freeTrialPeriodInDays);
    }
    
    public void LicensePolicyDataOnDemand.setLicenseBaseCost(LicensePolicy obj, int index) {
        Double licenseBaseCost = new Integer(index).doubleValue();
        obj.setLicenseBaseCost(licenseBaseCost);
    }
    
    public void LicensePolicyDataOnDemand.setLicenseCostPerUser(LicensePolicy obj, int index) {
        Double licenseCostPerUser = new Integer(index).doubleValue();
        obj.setLicenseCostPerUser(licenseCostPerUser);
    }
    
    public void LicensePolicyDataOnDemand.setLicenseId(LicensePolicy obj, int index) {
        Integer licenseId = new Integer(index);
        obj.setLicenseId(licenseId);
    }
    
    public void LicensePolicyDataOnDemand.setLicenseName(LicensePolicy obj, int index) {
        String licenseName = "licenseName_" + index;
        if (licenseName.length() > 100) {
            licenseName = licenseName.substring(0, 100);
        }
        obj.setLicenseName(licenseName);
    }
    
    public void LicensePolicyDataOnDemand.setLicenseType(LicensePolicy obj, int index) {
        Integer licenseType = new Integer(index);
        obj.setLicenseType(licenseType);
    }
    
    public void LicensePolicyDataOnDemand.setTenLicPolicy(LicensePolicy obj, int index) {
        TenantLicensePolicy tenLicPolicy = tenantLicensePolicyDataOnDemand.getRandomTenantLicensePolicy();
        obj.setTenLicPolicy(tenLicPolicy);
    }
    
    public LicensePolicy LicensePolicyDataOnDemand.getSpecificLicensePolicy(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        LicensePolicy obj = data.get(index);
        java.lang.Long id = obj.getId();
        return LicensePolicy.findLicensePolicy(id);
    }
    
    public LicensePolicy LicensePolicyDataOnDemand.getRandomLicensePolicy() {
        init();
        LicensePolicy obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return LicensePolicy.findLicensePolicy(id);
    }
    
    public boolean LicensePolicyDataOnDemand.modifyLicensePolicy(LicensePolicy obj) {
        return false;
    }
    
    public void LicensePolicyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = LicensePolicy.findLicensePolicyEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'LicensePolicy' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sjsu.bikelet.domain.LicensePolicy>();
        for (int i = 0; i < 10; i++) {
            LicensePolicy obj = getNewTransientLicensePolicy(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
