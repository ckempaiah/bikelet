// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.Address;
import com.sjsu.bikelet.domain.AddressDataOnDemand;
import com.sjsu.bikelet.domain.BikeLetUser;
import com.sjsu.bikelet.domain.Bill;
import com.sjsu.bikelet.domain.BillDataOnDemand;
import com.sjsu.bikelet.domain.PaymentInfo;
import com.sjsu.bikelet.domain.PaymentInfoDataOnDemand;
import com.sjsu.bikelet.domain.PaymentTransaction;
import com.sjsu.bikelet.domain.PaymentTransactionDataOnDemand;
import com.sjsu.bikelet.domain.RentTransaction;
import com.sjsu.bikelet.domain.RentTransactionDataOnDemand;
import com.sjsu.bikelet.domain.UserRole;
import com.sjsu.bikelet.domain.UserRoleDataOnDemand;
import com.sjsu.bikelet.domain.UserSubscriptionPolicy;
import com.sjsu.bikelet.domain.UserSubscriptionPolicyDataOnDemand;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BikeLetUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BikeLetUserDataOnDemand: @Component;
    
    private Random BikeLetUserDataOnDemand.rnd = new SecureRandom();
    
    private List<BikeLetUser> BikeLetUserDataOnDemand.data;
    
    @Autowired
    private AddressDataOnDemand BikeLetUserDataOnDemand.addressDataOnDemand;
    
    @Autowired
    private BillDataOnDemand BikeLetUserDataOnDemand.billDataOnDemand;
    
    @Autowired
    private PaymentInfoDataOnDemand BikeLetUserDataOnDemand.paymentInfoDataOnDemand;
    
    @Autowired
    private PaymentTransactionDataOnDemand BikeLetUserDataOnDemand.paymentTransactionDataOnDemand;
    
    @Autowired
    private RentTransactionDataOnDemand BikeLetUserDataOnDemand.rentTransactionDataOnDemand;
    
    @Autowired
    private UserRoleDataOnDemand BikeLetUserDataOnDemand.userRoleDataOnDemand;
    
    @Autowired
    private UserSubscriptionPolicyDataOnDemand BikeLetUserDataOnDemand.userSubscriptionPolicyDataOnDemand;
    
    public BikeLetUser BikeLetUserDataOnDemand.getNewTransientBikeLetUser(int index) {
        BikeLetUser obj = new BikeLetUser();
        setAddresses(obj, index);
        setBills(obj, index);
        setEmail(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        setPassword(obj, index);
        setPaymentInfo(obj, index);
        setPaymentTransactions(obj, index);
        setProgramId(obj, index);
        setRentTransactions(obj, index);
        setRoles(obj, index);
        setUserId(obj, index);
        setUsp(obj, index);
        return obj;
    }
    
    public void BikeLetUserDataOnDemand.setAddresses(BikeLetUser obj, int index) {
        Address addresses = addressDataOnDemand.getRandomAddress();
        obj.setAddresses(addresses);
    }
    
    public void BikeLetUserDataOnDemand.setBills(BikeLetUser obj, int index) {
        Bill bills = billDataOnDemand.getRandomBill();
        obj.setBills(bills);
    }
    
    public void BikeLetUserDataOnDemand.setEmail(BikeLetUser obj, int index) {
        String email = "email_" + index;
        if (email.length() > 40) {
            email = email.substring(0, 40);
        }
        obj.setEmail(email);
    }
    
    public void BikeLetUserDataOnDemand.setFirstName(BikeLetUser obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 30) {
            firstName = firstName.substring(0, 30);
        }
        obj.setFirstName(firstName);
    }
    
    public void BikeLetUserDataOnDemand.setLastName(BikeLetUser obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 30) {
            lastName = lastName.substring(0, 30);
        }
        obj.setLastName(lastName);
    }
    
    public void BikeLetUserDataOnDemand.setPassword(BikeLetUser obj, int index) {
        String password = "password_" + index;
        if (password.length() > 15) {
            password = password.substring(0, 15);
        }
        obj.setPassword(password);
    }
    
    public void BikeLetUserDataOnDemand.setPaymentInfo(BikeLetUser obj, int index) {
        PaymentInfo paymentInfo = paymentInfoDataOnDemand.getRandomPaymentInfo();
        obj.setPaymentInfo(paymentInfo);
    }
    
    public void BikeLetUserDataOnDemand.setPaymentTransactions(BikeLetUser obj, int index) {
        PaymentTransaction paymentTransactions = paymentTransactionDataOnDemand.getRandomPaymentTransaction();
        obj.setPaymentTransactions(paymentTransactions);
    }
    
    public void BikeLetUserDataOnDemand.setProgramId(BikeLetUser obj, int index) {
        Integer programId = new Integer(index);
        obj.setProgramId(programId);
    }
    
    public void BikeLetUserDataOnDemand.setRentTransactions(BikeLetUser obj, int index) {
        RentTransaction rentTransactions = rentTransactionDataOnDemand.getRandomRentTransaction();
        obj.setRentTransactions(rentTransactions);
    }
    
    public void BikeLetUserDataOnDemand.setRoles(BikeLetUser obj, int index) {
        UserRole roles = userRoleDataOnDemand.getRandomUserRole();
        obj.setRoles(roles);
    }
    
    public void BikeLetUserDataOnDemand.setUserId(BikeLetUser obj, int index) {
        Integer userId = new Integer(index);
        obj.setUserId(userId);
    }
    
    public void BikeLetUserDataOnDemand.setUsp(BikeLetUser obj, int index) {
        UserSubscriptionPolicy usp = userSubscriptionPolicyDataOnDemand.getRandomUserSubscriptionPolicy();
        obj.setUsp(usp);
    }
    
    public BikeLetUser BikeLetUserDataOnDemand.getSpecificBikeLetUser(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        BikeLetUser obj = data.get(index);
        java.lang.Long id = obj.getId();
        return BikeLetUser.findBikeLetUser(id);
    }
    
    public BikeLetUser BikeLetUserDataOnDemand.getRandomBikeLetUser() {
        init();
        BikeLetUser obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return BikeLetUser.findBikeLetUser(id);
    }
    
    public boolean BikeLetUserDataOnDemand.modifyBikeLetUser(BikeLetUser obj) {
        return false;
    }
    
    public void BikeLetUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = BikeLetUser.findBikeLetUserEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'BikeLetUser' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sjsu.bikelet.domain.BikeLetUser>();
        for (int i = 0; i < 10; i++) {
            BikeLetUser obj = getNewTransientBikeLetUser(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
