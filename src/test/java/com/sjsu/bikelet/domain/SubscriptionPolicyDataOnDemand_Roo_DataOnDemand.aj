// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.ProgramDataOnDemand;
import com.sjsu.bikelet.domain.SubscriptionPolicy;
import com.sjsu.bikelet.domain.SubscriptionPolicyDataOnDemand;
import com.sjsu.bikelet.service.SubscriptionPolicyService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SubscriptionPolicyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SubscriptionPolicyDataOnDemand: @Component;
    
    private Random SubscriptionPolicyDataOnDemand.rnd = new SecureRandom();
    
    private List<SubscriptionPolicy> SubscriptionPolicyDataOnDemand.data;
    
    @Autowired
    ProgramDataOnDemand SubscriptionPolicyDataOnDemand.programDataOnDemand;
    
    @Autowired
    SubscriptionPolicyService SubscriptionPolicyDataOnDemand.subscriptionPolicyService;
    
    public SubscriptionPolicy SubscriptionPolicyDataOnDemand.getNewTransientSubscriptionPolicy(int index) {
        SubscriptionPolicy obj = new SubscriptionPolicy();
        setPolicyDescription(obj, index);
        setPolicyName(obj, index);
        return obj;
    }
    
    public void SubscriptionPolicyDataOnDemand.setPolicyDescription(SubscriptionPolicy obj, int index) {
        String policyDescription = "policyDescription_" + index;
        if (policyDescription.length() > 250) {
            policyDescription = policyDescription.substring(0, 250);
        }
        obj.setPolicyDescription(policyDescription);
    }
    
    public void SubscriptionPolicyDataOnDemand.setPolicyName(SubscriptionPolicy obj, int index) {
        String policyName = "policyName_" + index;
        obj.setPolicyName(policyName);
    }
    
    public SubscriptionPolicy SubscriptionPolicyDataOnDemand.getSpecificSubscriptionPolicy(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SubscriptionPolicy obj = data.get(index);
        Long id = obj.getId();
        return subscriptionPolicyService.findSubscriptionPolicy(id);
    }
    
    public SubscriptionPolicy SubscriptionPolicyDataOnDemand.getRandomSubscriptionPolicy() {
        init();
        SubscriptionPolicy obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return subscriptionPolicyService.findSubscriptionPolicy(id);
    }
    
    public boolean SubscriptionPolicyDataOnDemand.modifySubscriptionPolicy(SubscriptionPolicy obj) {
        return false;
    }
    
    public void SubscriptionPolicyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = subscriptionPolicyService.findSubscriptionPolicyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SubscriptionPolicy' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SubscriptionPolicy>();
        for (int i = 0; i < 10; i++) {
            SubscriptionPolicy obj = getNewTransientSubscriptionPolicy(i);
            try {
                subscriptionPolicyService.saveSubscriptionPolicy(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
