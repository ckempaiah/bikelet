// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.Bike;
import com.sjsu.bikelet.domain.BikeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect BikeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BikeDataOnDemand: @Component;
    
    private Random BikeDataOnDemand.rnd = new SecureRandom();
    
    private List<Bike> BikeDataOnDemand.data;
    
    public Bike BikeDataOnDemand.getNewTransientBike(int index) {
        Bike obj = new Bike();
        setBikeColor(obj, index);
        setBikeHeight(obj, index);
        setBikeStatus(obj, index);
        setBikeType(obj, index);
        setLastServiceDate(obj, index);
        setWheelSize(obj, index);
        return obj;
    }
    
    public void BikeDataOnDemand.setBikeColor(Bike obj, int index) {
        String bikeColor = "bikeColo_" + index;
        if (bikeColor.length() > 10) {
            bikeColor = bikeColor.substring(0, 10);
        }
        obj.setBikeColor(bikeColor);
    }
    
    public void BikeDataOnDemand.setBikeHeight(Bike obj, int index) {
        Integer bikeHeight = new Integer(index);
        obj.setBikeHeight(bikeHeight);
    }
    
    public void BikeDataOnDemand.setBikeStatus(Bike obj, int index) {
        String bikeStatus = "bikeStat_" + index;
        if (bikeStatus.length() > 10) {
            bikeStatus = bikeStatus.substring(0, 10);
        }
        obj.setBikeStatus(bikeStatus);
    }
    
    public void BikeDataOnDemand.setBikeType(Bike obj, int index) {
        String bikeType = "bikeType_" + index;
        if (bikeType.length() > 20) {
            bikeType = bikeType.substring(0, 20);
        }
        obj.setBikeType(bikeType);
    }
    
    public void BikeDataOnDemand.setLastServiceDate(Bike obj, int index) {
        Date lastServiceDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastServiceDate(lastServiceDate);
    }
    
    public void BikeDataOnDemand.setWheelSize(Bike obj, int index) {
        String wheelSize = "wheelSiz_" + index;
        if (wheelSize.length() > 10) {
            wheelSize = wheelSize.substring(0, 10);
        }
        obj.setWheelSize(wheelSize);
    }
    
    public Bike BikeDataOnDemand.getSpecificBike(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Bike obj = data.get(index);
        Long id = obj.getId();
        return Bike.findBike(id);
    }
    
    public Bike BikeDataOnDemand.getRandomBike() {
        init();
        Bike obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Bike.findBike(id);
    }
    
    public boolean BikeDataOnDemand.modifyBike(Bike obj) {
        return false;
    }
    
    public void BikeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Bike.findBikeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Bike' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Bike>();
        for (int i = 0; i < 10; i++) {
            Bike obj = getNewTransientBike(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
