// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.Bike;
import com.sjsu.bikelet.domain.BikeDataOnDemand;
import com.sjsu.bikelet.domain.BikeLetUser;
import com.sjsu.bikelet.domain.BikeLetUserDataOnDemand;
import com.sjsu.bikelet.domain.Organization;
import com.sjsu.bikelet.domain.OrganizationDataOnDemand;
import com.sjsu.bikelet.domain.Program;
import com.sjsu.bikelet.domain.ProgramDataOnDemand;
import com.sjsu.bikelet.domain.Station;
import com.sjsu.bikelet.domain.StationDataOnDemand;
import com.sjsu.bikelet.domain.Tenant;
import com.sjsu.bikelet.domain.TenantLicensePolicy;
import com.sjsu.bikelet.domain.TenantLicensePolicyDataOnDemand;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TenantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TenantDataOnDemand: @Component;
    
    private Random TenantDataOnDemand.rnd = new SecureRandom();
    
    private List<Tenant> TenantDataOnDemand.data;
    
    @Autowired
    private BikeDataOnDemand TenantDataOnDemand.bikeDataOnDemand;
    
    @Autowired
    private OrganizationDataOnDemand TenantDataOnDemand.organizationDataOnDemand;
    
    @Autowired
    private ProgramDataOnDemand TenantDataOnDemand.programDataOnDemand;
    
    @Autowired
    private StationDataOnDemand TenantDataOnDemand.stationDataOnDemand;
    
    @Autowired
    private TenantLicensePolicyDataOnDemand TenantDataOnDemand.tenantLicensePolicyDataOnDemand;
    
    @Autowired
    private BikeLetUserDataOnDemand TenantDataOnDemand.bikeLetUserDataOnDemand;
    
    public Tenant TenantDataOnDemand.getNewTransientTenant(int index) {
        Tenant obj = new Tenant();
        setBikes(obj, index);
        setContactId(obj, index);
        setOrganizations(obj, index);
        setPrograms(obj, index);
        setStations(obj, index);
        setTenLicPolicy(obj, index);
        setTenantId(obj, index);
        setTenantName(obj, index);
        setUsers(obj, index);
        return obj;
    }
    
    public void TenantDataOnDemand.setBikes(Tenant obj, int index) {
        Bike bikes = bikeDataOnDemand.getRandomBike();
        obj.setBikes(bikes);
    }
    
    public void TenantDataOnDemand.setContactId(Tenant obj, int index) {
        Integer contactId = new Integer(index);
        obj.setContactId(contactId);
    }
    
    public void TenantDataOnDemand.setOrganizations(Tenant obj, int index) {
        Organization organizations = organizationDataOnDemand.getRandomOrganization();
        obj.setOrganizations(organizations);
    }
    
    public void TenantDataOnDemand.setPrograms(Tenant obj, int index) {
        Program programs = programDataOnDemand.getRandomProgram();
        obj.setPrograms(programs);
    }
    
    public void TenantDataOnDemand.setStations(Tenant obj, int index) {
        Station stations = stationDataOnDemand.getRandomStation();
        obj.setStations(stations);
    }
    
    public void TenantDataOnDemand.setTenLicPolicy(Tenant obj, int index) {
        TenantLicensePolicy tenLicPolicy = tenantLicensePolicyDataOnDemand.getRandomTenantLicensePolicy();
        obj.setTenLicPolicy(tenLicPolicy);
    }
    
    public void TenantDataOnDemand.setTenantId(Tenant obj, int index) {
        Integer tenantId = new Integer(index);
        obj.setTenantId(tenantId);
    }
    
    public void TenantDataOnDemand.setTenantName(Tenant obj, int index) {
        String tenantName = "tenantName_" + index;
        if (tenantName.length() > 30) {
            tenantName = tenantName.substring(0, 30);
        }
        obj.setTenantName(tenantName);
    }
    
    public void TenantDataOnDemand.setUsers(Tenant obj, int index) {
        BikeLetUser users = bikeLetUserDataOnDemand.getRandomBikeLetUser();
        obj.setUsers(users);
    }
    
    public Tenant TenantDataOnDemand.getSpecificTenant(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Tenant obj = data.get(index);
        java.lang.Long id = obj.getId();
        return Tenant.findTenant(id);
    }
    
    public Tenant TenantDataOnDemand.getRandomTenant() {
        init();
        Tenant obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return Tenant.findTenant(id);
    }
    
    public boolean TenantDataOnDemand.modifyTenant(Tenant obj) {
        return false;
    }
    
    public void TenantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Tenant.findTenantEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Tenant' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sjsu.bikelet.domain.Tenant>();
        for (int i = 0; i < 10; i++) {
            Tenant obj = getNewTransientTenant(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
