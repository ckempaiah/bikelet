// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.Program;
import com.sjsu.bikelet.domain.ProgramDataOnDemand;
import com.sjsu.bikelet.domain.Station;
import com.sjsu.bikelet.domain.StationDataOnDemand;
import com.sjsu.bikelet.domain.Tenant;
import com.sjsu.bikelet.domain.TenantDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StationDataOnDemand: @Component;
    
    private Random StationDataOnDemand.rnd = new SecureRandom();
    
    private List<Station> StationDataOnDemand.data;
    
    @Autowired
    private ProgramDataOnDemand StationDataOnDemand.programDataOnDemand;
    
    @Autowired
    private TenantDataOnDemand StationDataOnDemand.tenantDataOnDemand;
    
    public Station StationDataOnDemand.getNewTransientStation(int index) {
        Station obj = new Station();
        setCapacity(obj, index);
        setLocation(obj, index);
        setProgramId(obj, index);
        setTenantId(obj, index);
        return obj;
    }
    
    public void StationDataOnDemand.setCapacity(Station obj, int index) {
        Integer capacity = new Integer(index);
        obj.setCapacity(capacity);
    }
    
    public void StationDataOnDemand.setLocation(Station obj, int index) {
        String location = "location_" + index;
        obj.setLocation(location);
    }
    
    public void StationDataOnDemand.setProgramId(Station obj, int index) {
        Program programId = programDataOnDemand.getRandomProgram();
        obj.setProgramId(programId);
    }
    
    public void StationDataOnDemand.setTenantId(Station obj, int index) {
        Tenant tenantId = tenantDataOnDemand.getRandomTenant();
        obj.setTenantId(tenantId);
    }
    
    public Station StationDataOnDemand.getSpecificStation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Station obj = data.get(index);
        Long id = obj.getId();
        return Station.findStation(id);
    }
    
    public Station StationDataOnDemand.getRandomStation() {
        init();
        Station obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Station.findStation(id);
    }
    
    public boolean StationDataOnDemand.modifyStation(Station obj) {
        return false;
    }
    
    public void StationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Station.findStationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Station' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Station>();
        for (int i = 0; i < 10; i++) {
            Station obj = getNewTransientStation(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
