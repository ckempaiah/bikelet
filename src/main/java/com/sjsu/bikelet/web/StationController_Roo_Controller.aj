// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.web;

import com.sjsu.bikelet.domain.Station;
import com.sjsu.bikelet.domain.Program;
import java.util.List;
import com.sjsu.bikelet.web.Utils;
import com.sjsu.bikelet.service.ProgramService;
import com.sjsu.bikelet.service.StationService;
import com.sjsu.bikelet.service.TenantService;
import com.sjsu.bikelet.web.StationController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import org.springframework.roo.addon.web.mvc.controller.scaffold.RooWebScaffold;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

privileged aspect StationController_Roo_Controller {
    
    @Autowired
	StationService StationController.stationService;
	    
	@Autowired
	ProgramService StationController.programService;
	    
	@Autowired
	TenantService StationController.tenantService;
	    
    @RequestMapping(params = "form", produces = "text/html")
    public String StationController.createForm(Model uiModel) {
    	Long tenantId = Utils.getLogonTenantId();
    	Station station = new Station();
    	station.setTenantId(tenantService.findTenant(tenantId));
        populateEditForm(uiModel, station);
        return "stations/create";
    }
	    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String StationController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("station", stationService.findStation(id));
        uiModel.addAttribute("itemId", id);
        return "stations/show";
    }
	    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String StationController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, stationService.findStation(id));
        return "stations/update";
    }
	    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String StationController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Station station = stationService.findStation(id);
        stationService.deleteStation(station);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/stations";
    }
	    
    String StationController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
    
}
