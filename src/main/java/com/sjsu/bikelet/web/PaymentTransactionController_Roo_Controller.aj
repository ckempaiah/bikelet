// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.web;

import com.sjsu.bikelet.domain.PaymentTransaction;
import com.sjsu.bikelet.service.BikeLetUserService;
import com.sjsu.bikelet.service.BillService;
import com.sjsu.bikelet.service.PaymentInfoService;
import com.sjsu.bikelet.service.PaymentTransactionService;
import com.sjsu.bikelet.web.PaymentTransactionController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PaymentTransactionController_Roo_Controller {
    
    @Autowired
    PaymentTransactionService PaymentTransactionController.paymentTransactionService;
    
    @Autowired
    BikeLetUserService PaymentTransactionController.bikeLetUserService;
    
    @Autowired
    BillService PaymentTransactionController.billService;
    
    @Autowired
    PaymentInfoService PaymentTransactionController.paymentInfoService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PaymentTransactionController.create(@Valid PaymentTransaction paymentTransaction, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, paymentTransaction);
            return "paymenttransactions/create";
        }
        uiModel.asMap().clear();
        paymentTransactionService.savePaymentTransaction(paymentTransaction);
        return "redirect:/paymenttransactions/" + encodeUrlPathSegment(paymentTransaction.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PaymentTransactionController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PaymentTransaction());
        return "paymenttransactions/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PaymentTransactionController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("paymenttransaction", paymentTransactionService.findPaymentTransaction(id));
        uiModel.addAttribute("itemId", id);
        return "paymenttransactions/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PaymentTransactionController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("paymenttransactions", paymentTransactionService.findPaymentTransactionEntries(firstResult, sizeNo));
            float nrOfPages = (float) paymentTransactionService.countAllPaymentTransactions() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("paymenttransactions", paymentTransactionService.findAllPaymentTransactions());
        }
        addDateTimeFormatPatterns(uiModel);
        return "paymenttransactions/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PaymentTransactionController.update(@Valid PaymentTransaction paymentTransaction, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, paymentTransaction);
            return "paymenttransactions/update";
        }
        uiModel.asMap().clear();
        paymentTransactionService.updatePaymentTransaction(paymentTransaction);
        return "redirect:/paymenttransactions/" + encodeUrlPathSegment(paymentTransaction.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PaymentTransactionController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, paymentTransactionService.findPaymentTransaction(id));
        return "paymenttransactions/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PaymentTransactionController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PaymentTransaction paymentTransaction = paymentTransactionService.findPaymentTransaction(id);
        paymentTransactionService.deletePaymentTransaction(paymentTransaction);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/paymenttransactions";
    }
    
    void PaymentTransactionController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("paymentTransaction_dateoftransaction_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PaymentTransactionController.populateEditForm(Model uiModel, PaymentTransaction paymentTransaction) {
        uiModel.addAttribute("paymentTransaction", paymentTransaction);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("bikeletusers", bikeLetUserService.findAllBikeLetUsers());
        uiModel.addAttribute("bills", billService.findAllBills());
        uiModel.addAttribute("paymentinfoes", paymentInfoService.findAllPaymentInfoes());
    }
    
    String PaymentTransactionController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
