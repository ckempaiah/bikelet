// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.bikelet.domain;

import com.sjsu.bikelet.domain.Station;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Station_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Station.entityManager;
    
    public static final EntityManager Station.entityManager() {
        EntityManager em = new Station().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Station.countStations() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Station o", Long.class).getSingleResult();
    }
    
    public static long Station.countStationsByTenant(Long tenantId) {
    	if (tenantId == null)
    		return countStations();
        return entityManager().createQuery("SELECT COUNT(o) FROM Station o where o.tenantId.id = :tenantId", Long.class).setParameter("tenantId", tenantId).getSingleResult();
    }
    
    public static List<Station> Station.findAllStations() {
        return entityManager().createQuery("SELECT o FROM Station o", Station.class).getResultList();
    }
    
    public static List<Station> Station.findAllStationsByTenant(Long tenantId) {
    	if (tenantId == null)
    		return findAllStations();
        return entityManager().createQuery("SELECT o FROM Station o where o.tenantId.id = :tenantId", Station.class).setParameter("tenantId", tenantId).getResultList();
    }
    
    public static Station Station.findStation(Long id) {
        if (id == null) return null;
        return entityManager().find(Station.class, id);
    }
    
    public static List<Station> Station.findStationEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Station o", Station.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Station> Station.findStationEntriesByTenant(Long tenantId, int firstResult, int maxResults) {
    	if (tenantId == null)
    		return findStationEntries(firstResult, maxResults);
        return entityManager().createQuery("SELECT o FROM Station o where o.tenantId.id = :tenantId", Station.class).setParameter("tenantId", tenantId).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Station.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Station.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Station attached = Station.findStation(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Station.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Station.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Station Station.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Station merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
